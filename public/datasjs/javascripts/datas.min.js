datasJs = {
    // events when the user add or remove a value
    events: {},

    version: '1.0.0',

    // generate a random UUID
    //
    //
    uuidv4: function() {
        return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
          (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
        );
    },

    // methods to manage the buttons
    //
    //
    buttons_count: function(parent_buttons) {
        // TODO: Code Me!
    },

    add_button: function(parent_buttons, h, opacity='1.0') {
        // TODO: Code Me!
    },

    disable_add_button: function(parent_buttons) {
        // disabling "add to list" button while loading list with AJAX
        let b = $(parent).find('.btn-create-export-list');
        $(b).attr('disabled', 'disabled');
    },

    enable_add_button: function(parent_buttons) {
        let b = $(parent).find('.btn-create-export-list');
        let t = $(parent).find('.input-export-lists');
        // enable only if the input is not empty
        if ($(t).val().toString().trim() != '') {
            $(b).removeAttr('disabled');
        }
    },

    disable_add_input: function(parent_buttons) {
        let t = $(parent).find('.input-export-lists');
        $(t).attr('disabled', 'disabled');
    },

    enable_add_input: function(parent_buttons) {
        let t = $(parent).find('.input-export-lists');
        $(t).removeAttr('disabled');
    },

    // methods to manage the items
    //
    //
    items_count: function(parent_items) {
        // TODO: Code Me!
    },

    set_strikethrough: function(parent_items, id, b) {
        // TODO: Code Me!
    },

    remove_all: function(parent_items) {
        // TODO: Code Me!
    },

    remove_item: function(parent_items, id) {
        // TODO: Code Me!
    },

    set_loading: function(parent_items, b) {
        // TODO: Code Me!
    },

    add_item: function(parent_items, h, opacity='1.0') {
        // TODO: Code Me!
    },

    set_item_opacity: function(parent_items, id, opacity) {
        // TODO: Code Me!
    },

    // methods to manage the widget
    //
    //
    add_item_from_input: function(parent_buttons, parent_items) {
        // get the .div-export-lists inside the parent element
        let div = $(parent).find('.div-export-lists');
        // get the input element
        o = $(parent).find('.input-export-lists');
        // create new item descriptor
        let h = {
            id: datasJs.uuidv4(),
            name: $(o).val().toString(),
            checked: true
        };
        // if it is defined the function on_check_item
        if (datasJs.events[parent.id+".on_add_item"]) {
            // call the function
            datasJs.events[parent.id+".on_add_item"](h);
        } else {
            datasJs.add_item(parent, h);
        }
    },

    draw: function(parent_buttons, parent_items, h) {
        // draw the buttons widget
        let r = "";
        r += "<div class='datasjs-buttons'> ";
        r += "  <span>"+h.caption+": </span> ";

        // iterate the array of buttons
        $.each(h['buttons'], function(i, v) {
            r += "      <button class='btn btn-link add-data' data-id-lead='<%=row[:id].to_guid%>' data-type='<%=BlackStack::Leads::Data::TYPE_EMAIL.to_s%>'><i class='icon-envelope' title='Add Email Address'></i></button> ";
        });

        r += "  <!-- form to add data --> ";
        r += "  <div class='add-data-div' data-id-lead='<%=row[:id].to_guid%>'> ";
        r += "      <input type='hidden' class='input-block-level add-data-type' data-id-lead='<%=row[:id].to_guid%>' value='' /> ";
        r += "      <input type='text' class='input-block-level add-data-value' data-id-lead='<%=row[:id].to_guid%>' placeholder='Write data here.' value='' /> ";
        r += "      <br/> ";
        r += "      <button class='btn btn-link add-data-submit' data-id-lead='<%=row[:id].to_guid%>'><i class='icon-ok'></i></button> ";
        r += "      <button class='btn btn-link add-data-cancel' data-id-lead='<%=row[:id].to_guid%>'><i class='icon-remove'></i></button> ";
        r += "  </div> ";
        r += "</div> ";

        // draw the items widget
        let s = "";

        let o = $.parseHTML(r);
        let p = $.parseHTML(s);

        // disable .btn-create-export-list

        // enable/disable .btn-create-export-list when the user types in the input .input-export-lists

        // select all text when the input .input-export-lists is focused

        // close the dropdown list when press ESCAPE

        // enable/disable add button when writing in the input
        // apply the add event when press ENTER

        // apply the add event when click on the add button

        // add the widgets to the parent elements
        $(parent_buttons).append(o);
        $(parent_items).append(p);

        // iterate the buttons array into the h object
        $.each(h['buttons'], function(i, v) {
            datasJs.add_button(parent_buttons, v);
        });  

        // iterate the buttons array into the h object
        $.each(h['items'], function(i, v) {
            datasJs.add_item(parent_items, v);
        });  

        // events
        // store function to trigger when the user adds a value
        if (h['on_check_item'] != null) {
            datasJs.events[parent.id+".on_check_item"] = h['on_check_item'];
        }
    }
};