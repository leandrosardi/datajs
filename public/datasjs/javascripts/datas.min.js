datasJs = {
    // events when the user add or remove a value
    events: {},

    // store the hash definition of each component created here
    components: {},

    version: '1.0.0',

    // generate a random UUID
    //
    //
    uuidv4: function() {
        return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
          (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
        );
    },

    // methods to manage the buttons
    //
    //
    buttons_count: function(parent_buttons) {
        // TODO: Code Me!
    },

    disable_add_button: function(parent_buttons) {
        // disabling "add to list" button while loading list with AJAX
        let b = $(parent).find('.btn-create-export-list');
        $(b).attr('disabled', 'disabled');
    },

    enable_add_button: function(parent_buttons) {
        let b = $(parent).find('.btn-create-export-list');
        let t = $(parent).find('.input-export-lists');
        // enable only if the input is not empty
        if ($(t).val().toString().trim() != '') {
            $(b).removeAttr('disabled');
        }
    },

    disable_add_input: function(parent_buttons) {
        let t = $(parent).find('.input-export-lists');
        $(t).attr('disabled', 'disabled');
    },

    enable_add_input: function(parent_buttons) {
        let t = $(parent).find('.input-export-lists');
        $(t).removeAttr('disabled');
    },

    // methods to manage the items
    //
    //
    items_count: function(parent_items) {
        // TODO: Code Me!
    },

    remove_all: function(parent_items) {
        // TODO: Code Me!
    },

    remove_item: function(parent_items, id) {
        // TODO: Code Me!
    },

    set_loading: function(parent_items, b) {
        // TODO: Code Me!
    },

    // methods to manage the widget
    //
    //
    add_item_from_input: function(parent_buttons, parent_items) {
        // get the .div-export-lists inside the parent element
        let div = $(parent).find('.div-export-lists');
        // get the input element
        o = $(parent).find('.input-export-lists');
        // create new item descriptor
        let h = {
            id: datasJs.uuidv4(),
            name: $(o).val().toString(),
            checked: true
        };
        // if it is defined the function on_check_item
        if (datasJs.events[parent.id+".on_add_item"]) {
            // call the function
            datasJs.events[parent.id+".on_add_item"](h);
        } else {
            datasJs.add_item(parent, h);
        }
    },



    add_button: function(parent_buttons, v) {
        // get the id_lead
        let id_lead = $(parent_buttons).attr('data-id-lead');
        // get the .buttons element inside the parent element
        let buttons = $(parent_buttons).find('.buttons');
        // create the button element
        let b = document.createElement('button');
        b.setAttribute('class', 'btn btn-link add-data');
        b.setAttribute('data-id-lead', id_lead);
        b.setAttribute('data-type', v.code);
        // create the icon element
        let i = document.createElement('i');
        i.setAttribute('class', 'icon-'+v.icon);
        i.setAttribute('title', v.title);
        // add the icon to the button
        b.appendChild(i);
        // add the button to the buttons element
        $(buttons).append(b);
    },

    add_item: function(parent_items, v) {
        // restore the hash description from the components
        let h = datasJs.components[parent_items.id];
        let buttons = h.buttons;
        let trash_enabled = h.trash_enabled == null ? false : h.trash_enabled;
        let copy_enabled = h.copy_enabled == null ? false : h.copy_enabled;
        let strikethrough_enabled = h.strikethrough_enabled == null ? false : h.strikethrough_enabled;

        // get the id_lead
        let id_lead = $(parent_items).attr('data-id-lead');
        let table = $(parent_items).find('.datasjs-items');
        // create the child span
        let tr = document.createElement('tr');
        let td = null; // will create many TDs
        tr.setAttribute('data-id-lead', id_lead);
        tr.setAttribute('data-id-item', v.id);
        tr.setAttribute('class', 'data-item');

        // find the element into the array h.buttons with code == v.button_code
        let button = buttons.find(function(element) {
            return element.code == v.button_code;
        });

        // setup span class email or phone, depending on the type
        tr.setAttribute('class', 'contact-info-item '+button.name);
            
        // set remove button
        if (trash_enabled) {
            let td = document.createElement('td');
            let remove = document.createElement('button');
            td.setAttribute('width', '32px');
            remove.setAttribute('class', 'btn btn-link btn-remove-item');
            remove.setAttribute('data-id-lead', id_lead);
            remove.setAttribute('data-id-item', v.id);
            $(remove).html('<i class="icon-trash"></i>');
            td.appendChild(remove);
            tr.appendChild(td);
        }

        // create icon with icon-envelope or icon-phone, depending on the type
        td = document.createElement('td');
        td.setAttribute('width', '32px');
        let icon = document.createElement('i');
        icon.setAttribute('class', 'icon-'+button.icon);
        td.appendChild(icon)
        tr.appendChild(td);

        // create anchor with href mailto or tel, depending on the type
        // set strikethrough
        td = document.createElement('td');
        td.setAttribute('class', 'data-value');
        td.setAttribute('width', 'auto');
        
        if (button.link) {
            let a = document.createElement('a');
            a.setAttribute('href', button.link+':'+v.value);
            a.innerHTML = v.value;
            td.appendChild(a);
        } else {
            let txt = document.createElement('span');;
            txt.innerHTML = v.value;
            td.appendChild(txt);
        }
        tr.appendChild(td);

        // add the copy button
        if (copy_enabled) {
            td = document.createElement('td');
            td.setAttribute('width', '32px');
            let copy = document.createElement('button');
            copy.setAttribute('class', 'btn btn-link btn-copy-value');
            copy.setAttribute('data-id-lead', id_lead);
            copy.setAttribute('data-id-item', v.id);
            $(copy).html('<i class="icon-copy"></i>');
            td.appendChild(copy);
            tr.appendChild(td);
        }

        // add the copy button
        if (strikethrough_enabled) {
            td = document.createElement('td');
            td.setAttribute('width', '32px');
            let strikethrough = document.createElement('button');
            strikethrough.setAttribute('class', 'btn btn-link btn-strikethrough-item');
            strikethrough.setAttribute('data-id-lead', id_lead);
            strikethrough.setAttribute('data-id-item', v.id);
            $(strikethrough).html('<i class="icon-ok"></i>');
            td.appendChild(strikethrough);
            tr.appendChild(td);
        }

        // add item to the table
        table.append(tr);

        // apply strikethrough
        if (v.strikethrough) {
            //$(td).addClass('strikethrough');
            //$(td).css('text-decoration', 'line-through');
            datasJs.set_strikethrough(parent_items, v.id, true)
        }
    },

    draw: function(parent_buttons, parent_items, h) {
        let r = "";

        // save the component
        this.components[parent_items.id] = h;

        // set the data-id-lead attribute
        $(parent_buttons).attr('data-id-lead', h.id);
        $(parent_items).attr('data-id-lead', h.id);

        // draw the buttons component
        r += "<div class='datasjs-buttons'> ";
        r += "  <span>"+h.caption+": </span> ";
        r += "  <span class='buttons'></span> ";
        r += "  <!-- form to add data --> ";
        r += "  <div class='add-data-div' data-id-lead='"+h.id+"'> ";
        r += "      <input type='hidden' class='input-block-level add-data-type' data-id-lead='"+h.id+"' value='' /> ";
        r += "      <input type='text' class='input-block-level add-data-value' data-id-lead='"+h.id+"' value='' /> ";
        r += "      <br/> ";
        r += "      <button class='btn btn-link add-data-submit' data-id-lead='"+h.id+"'><i class='icon-ok'></i></button> ";
        r += "      <button class='btn btn-link add-data-cancel' data-id-lead='"+h.id+"'><i class='icon-remove'></i></button> ";
        r += "  </div> ";
        r += "</div> ";
        // create the HTML entity
        let o = $.parseHTML(r);
        // hide .add-data-div
        $(o).find('.add-data-div').hide();
        // add the widgets to the parent
        $(parent_buttons).append(o);
        // add the buttons
        $.each(h['buttons'], function(i, v) {
            datasJs.add_button(parent_buttons, v);
        });

        // draw the items component
        table = document.createElement('table');
        table.setAttribute('data-id-lead', h.id);
        table.setAttribute('class', 'datasjs-items')
        table.setAttribute('style', 'table-layout: fixed; width: 100%;');
        // add items component to the parent
        $(parent_items).append(table);
        // iterate the array of items
        $.each(h['items'], function(i, v) {
            datasJs.add_item(parent_items, v);
        });

        // events
        // store function to trigger when the user adds a value
        if (h['on_check_item'] != null) {
            datasJs.events[parent.id+".on_check_item"] = h['on_check_item'];
        }

        // setup code for all events
        datasJs.apply_buttons_behaviour(parent_buttons, parent_items);
        datasJs.apply_items_behaviour(parent_buttons, parent_items);
    },

    apply_buttons_behaviour: function(parent_buttons, parent_items) {
        // select all text of .add-data-value when focus on .add-data-value
        $(parent_buttons).find('.add-data-value').focus(function() {
            this.select();
        });

        // show .add-data-div when click on .add-data button
        $(parent_buttons).find('.add-data').click(function() {
            type = $(this).attr('data-type');
            // show the form
            datasJs.show_form(parent_buttons, type);
        });

        // hide .add-data-div when click on .add-data-cancel button
        $(parent_buttons).find('.add-data-cancel').click(function() {
            // hide the form
            datasJs.hide_form(parent_buttons);
        });

        // hide .add-data-div when press ESCAPE on parent_buttons
        $(parent_buttons).keyup(function(e) {
            if (e.keyCode == 27) {
                datasJs.hide_form(parent_buttons);
            }
        });

        // add item when click on .add-data-submit button
        $(parent_buttons).find('.add-data-submit').click(function() {
            datasJs.on_add_item(parent_buttons, parent_items);
            // setup code for all events
            datasJs.apply_items_behaviour(parent_buttons, parent_items);
        });

        // enable .add-data-submit button when .add-data-value is not empty
        // if .add-data-submit is enabled, add item when press ENTER on .add-data-value
        $(parent_buttons).find('.add-data-value').keyup(function(e) {
            if (datasJs.enable_add_button(parent_buttons)) {
                if (e.keyCode == 13) {
                    datasJs.on_add_item(parent_buttons, parent_items);
                    // setup code for all events
                    datasJs.apply_items_behaviour(parent_buttons, parent_items);
                }
            }
        });
    },

    apply_items_behaviour: function(parent_buttons, parent_items) {
        // strikethrough item when click on .btn-strikethrough-item button
        $(parent_items).find('.btn-strikethrough-item').click(function() {
            datasJs.on_strikethrough_item(parent_items, $(this).attr('data-id-item'));
        });

        // copy to clipboard when click on .btn-copy-value button
        $(parent_items).find('.btn-copy-value').click(function() {
            // get id_lead
            let id_lead = $(this).attr('data-id-lead');
            let id_item = $(this).attr('data-id-item');
            // get the table with .datasjs-items class and the data-id-lead attribute
            let table = $(parent_items).find("table.datasjs-items[data-id-lead='"+id_lead+"']");
            // get the tr.contact-info-item with the data-id-item attribute
            let tr = $(table).find("tr.contact-info-item[data-id-item='"+id_item+"']");
            // get the td.data-value
            let td = $(tr).find("td.data-value");
            // get the value
            let value = $(td).text();
            // copy to clipboard
            navigator.clipboard.writeText(value);
            // change from icon-copy to icon-ok
            $(this).find('i').removeClass('icon-copy').addClass('icon-ok');
            // wait 2 seconds and rollback
            setTimeout(function() {
                $(parent_items).find('.btn-copy-value').find('i').removeClass('icon-ok').addClass('icon-copy');
            }, 1000);
        });

        // remove item when click on .btn-remove-item button
        $(parent_items).find('.btn-remove-item').click(function() {
            datasJs.on_remove_item(parent_items, $(this).attr('data-id-item'));
        });
    },

    // enable .add-data-submit button when .add-data-value is not empty
    // return true if the value is not empty
    enable_add_button: function(parent_buttons) {
        let input = $(parent_buttons).find('.add-data-value');
        let button = $(parent_buttons).find('.add-data-submit');
        if ($(input).val().trim() != '') {
            $(button).removeAttr('disabled');
            return true;
        } else {
            $(button).attr('disabled', 'disabled');
            return false;
        }
    },

    set_strikethrough: function(parent_items, item_id, b) {
        let id_lead = $(parent_items).attr('data-id-lead');
        // get the element tr.contact-info-item phone with the same id of the item
        let tr = $(parent_items).find("tr.contact-info-item[data-id-item='"+item_id+"']");
        // get the td.data-value element with the same id of the item
        let td = $(tr).find("td.data-value");
        // change the style of the td element
        if (b) {
            $(td).addClass('strikethrough'); 
            $(td).css('text-decoration', 'line-through');
        } else {
            $(td).removeClass('strikethrough'); 
            $(td).css('text-decoration', 'none');
        }
    },

    is_strikethrough: function(parent_items, item_id, b) {
        let id_lead = $(parent_items).attr('data-id-lead');
        // get the element tr.contact-info-item phone with the same id of the item
        let tr = $(parent_items).find("tr.contact-info-item[data-id-item='"+item_id+"']");
        // get the td.data-value element with the same id of the item
        let td = $(tr).find("td.data-value");
        // change the style of the td element
        return $(td).hasClass('strikethrough'); 
    },
    
    // default function to trigger when the user strikethrough a value
    on_strikethrough_item: function(parent_items, item_id) {
        if (datasJs.is_strikethrough(parent_items, item_id)) {
            datasJs.set_strikethrough(parent_items, item_id, false);
        } else {
            datasJs.set_strikethrough(parent_items, item_id, true);
        }
    },
    
    // default function to trigger when the user removes an item
    on_remove_item: function(parent_items, item_id) {
        // get the element tr.contact-info-item phone with the same id of the item
        let tr = $(parent_items).find("tr.contact-info-item[data-id-item='"+item_id+"']");
        // remove the element
        $(tr).remove();
    },

    // default function to trigger when the user adds a value
    on_add_item: function(parent_buttons, parent_items) {
        let id_lead = $(parent_buttons).attr('data-id-lead');
        let type = datasJs.get_type(parent_buttons);
        let value = datasJs.get_value(parent_buttons);
        // add the data
        v = {
            id: datasJs.uuidv4(),
            button_code: type,
            value: value
        };
        datasJs.add_item(parent_items, v);
        // hide the form
        datasJs.hide_form(parent_buttons);
    },

    // hide the form to add data
    hide_form: function(parent_buttons) {
        let form = $(parent_buttons).find('.add-data-div');
        $(form).hide();
    },

    // show the form to add data
    show_form: function(parent_buttons, type) {
        let button = $(parent_buttons).find('.add-data');
        let id_lead = $(button).attr('data-id-lead');
        let form = $(parent_buttons).find('.add-data-div');
        $(form).find('.add-data-type').val(type);
        $(form).show();
        setTimeout(function() {
            $(form).find('.add-data-value').focus();
        }, 200);
        datasJs.enable_add_button(parent_buttons);
    },

    // get the value written in .add-data-value
    get_value: function(parent_buttons) {
        let id_lead = $(parent_buttons).attr('data-id-lead');
        let form = $(parent_buttons).find('.add-data-div');
        let value = $(form).find('.add-data-value').val();
        return value;
    },

    // get the type of the value wrtten in .add-data-value
    get_type: function(parent_buttons) {
        let id_lead = $(parent_buttons).attr('data-id-lead');
        let form = $(parent_buttons).find('.add-data-div');
        let type = $(form).find('.add-data-type').val();
        return type;
    },
};