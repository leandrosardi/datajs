datasJs = {
    // events when the user add or remove a value
    events: {},

    version: '1.0.0',

    // generate a random UUID
    //
    //
    uuidv4: function() {
        return ([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g, c =>
          (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16)
        );
    },

    // methods to manage the buttons
    //
    //
    buttons_count: function(parent_buttons) {
        // TODO: Code Me!
    },

    disable_add_button: function(parent_buttons) {
        // disabling "add to list" button while loading list with AJAX
        let b = $(parent).find('.btn-create-export-list');
        $(b).attr('disabled', 'disabled');
    },

    enable_add_button: function(parent_buttons) {
        let b = $(parent).find('.btn-create-export-list');
        let t = $(parent).find('.input-export-lists');
        // enable only if the input is not empty
        if ($(t).val().toString().trim() != '') {
            $(b).removeAttr('disabled');
        }
    },

    disable_add_input: function(parent_buttons) {
        let t = $(parent).find('.input-export-lists');
        $(t).attr('disabled', 'disabled');
    },

    enable_add_input: function(parent_buttons) {
        let t = $(parent).find('.input-export-lists');
        $(t).removeAttr('disabled');
    },

    // methods to manage the items
    //
    //
    items_count: function(parent_items) {
        // TODO: Code Me!
    },

    set_strikethrough: function(parent_items, id, b) {
        // TODO: Code Me!
    },

    remove_all: function(parent_items) {
        // TODO: Code Me!
    },

    remove_item: function(parent_items, id) {
        // TODO: Code Me!
    },

    set_loading: function(parent_items, b) {
        // TODO: Code Me!
    },

    set_item_opacity: function(parent_items, id, opacity) {
        // TODO: Code Me!
    },

    // methods to manage the widget
    //
    //
    add_item_from_input: function(parent_buttons, parent_items) {
        // get the .div-export-lists inside the parent element
        let div = $(parent).find('.div-export-lists');
        // get the input element
        o = $(parent).find('.input-export-lists');
        // create new item descriptor
        let h = {
            id: datasJs.uuidv4(),
            name: $(o).val().toString(),
            checked: true
        };
        // if it is defined the function on_check_item
        if (datasJs.events[parent.id+".on_add_item"]) {
            // call the function
            datasJs.events[parent.id+".on_add_item"](h);
        } else {
            datasJs.add_item(parent, h);
        }
    },



    add_button: function(parent_buttons, v) {
        // get the id_lead
        let id_lead = $(parent_buttons).attr('data-id-lead');
        // get the .buttons element inside the parent element
        let buttons = $(parent_buttons).find('.buttons');
        // create the button element
        let b = document.createElement('button');
        b.setAttribute('class', 'btn btn-link add-data');
        b.setAttribute('data-id-lead', id_lead);
        b.setAttribute('data-type', v.code);
        // create the icon element
        let i = document.createElement('i');
        i.setAttribute('class', 'icon-'+v.icon);
        i.setAttribute('title', v.title);
        // add the icon to the button
        b.appendChild(i);
        // add the button to the buttons element
        $(buttons).append(b);
    },

    add_item: function(parent_items, v, buttons, trash_enabled, copy_enabled, strikethrough_enabled) {
        // get the id_lead
        let id_lead = $(parent_items).attr('data-id-lead');
        let table = $(parent_items).find('.datasjs-items');
        // create the child span
        let tr = document.createElement('tr');
        let td = null; // will create many TDs
        tr.setAttribute('data-id-lead', id_lead);
        tr.setAttribute('data-id-data', v.id);
        tr.setAttribute('class', 'data-item');

        // find the element into the array h.buttons with code == v.button_code
        let button = buttons.find(function(element) {
            return element.code == v.button_code;
        });

        // setup span class email or phone, depending on the type
        tr.setAttribute('class', 'contact-info-item '+button.name);
            
        // set remove button
        if (trash_enabled) {
            let td = document.createElement('td');
            let remove = document.createElement('button');
            td.setAttribute('width', '32px');
            remove.setAttribute('class', 'btn btn-link btn-remove-data');
            remove.setAttribute('data-id-lead', id_lead);
            remove.setAttribute('data-id-data', v.id);
            $(remove).html('<i class="icon-trash"></i>');
            td.appendChild(remove);
            tr.appendChild(td);
        }

        // create icon with icon-envelope or icon-phone, depending on the type
        td = document.createElement('td');
        td.setAttribute('width', '32px');
        let icon = document.createElement('i');
        icon.setAttribute('class', 'icon-'+button.icon);
        td.appendChild(icon)
        tr.appendChild(td);

        // create anchor with href mailto or tel, depending on the type
        // set strikethrough
        td = document.createElement('td');
        td.setAttribute('class', 'data-value');
        td.setAttribute('width', 'auto');
            if (v.strikethrough) {
                td.setAttribute('style', 'text-decoration: line-through;');
            }
            if (button.link) {
                let a = document.createElement('a');
                a.setAttribute('href', button.link+':'+v.value);
                a.innerHTML = v.value;
                td.appendChild(a);
            } else {
                let txt = document.createElement('span');;
                txt.innerHTML = v.value;
                td.appendChild(txt);
            }
            tr.appendChild(td);

            // add the copy button
            if (copy_enabled) {
                td = document.createElement('td');
                td.setAttribute('width', '32px');
                let copy = document.createElement('button');
                copy.setAttribute('class', 'btn btn-link btn-copy-data');
                copy.setAttribute('data-id-lead', id_lead);
                copy.setAttribute('data-id-data', v.id);
                $(copy).html('<i class="icon-copy"></i>');
                td.appendChild(copy);
                tr.appendChild(td);
            }

            // add the copy button
            if (strikethrough_enabled) {
                td = document.createElement('td');
                td.setAttribute('width', '32px');
                let strikethrough = document.createElement('button');
                strikethrough.setAttribute('class', 'btn btn-link btn-strikethrough-data');
                strikethrough.setAttribute('data-id-lead', id_lead);
                strikethrough.setAttribute('data-id-data', v.id);
                $(strikethrough).html('<i class="icon-ok"></i>');
                td.appendChild(strikethrough);
                tr.appendChild(td);
            }

            // add item to the table
            table.append(tr);
    },

    draw: function(parent_buttons, parent_items, h) {
        let r = "";
        let trash_enabled = h.trash_button_enabled == null ? false : h.trash_button_enabled;
        let copy_enabled = h.copy_button_enabled == null ? false : h.copy_button_enabled;
        let strikethrough_enabled = h.strikethrough_enabled == null ? false : h.strikethrough_enabled;

        // set the data-id-lead attribute
        $(parent_buttons).attr('data-id-lead', h.id);
        $(parent_items).attr('data-id-lead', h.id);

        // draw the buttons component
        r += "<div class='datasjs-buttons'> ";
        r += "  <span>"+h.caption+": </span> ";
        r += "  <span class='buttons'></span> ";
        r += "  <!-- form to add data --> ";
        r += "  <div class='add-data-div' data-id-lead='"+h.id+"'> ";
        r += "      <input type='hidden' class='input-block-level add-data-type' data-id-lead='"+h.id+"' value='' /> ";
        r += "      <input type='text' class='input-block-level add-data-value' data-id-lead='"+h.id+"' value='' /> ";
        r += "      <br/> ";
        r += "      <button class='btn btn-link add-data-submit' data-id-lead='"+h.id+"'><i class='icon-ok'></i></button> ";
        r += "      <button class='btn btn-link add-data-cancel' data-id-lead='"+h.id+"'><i class='icon-remove'></i></button> ";
        r += "  </div> ";
        r += "</div> ";
        // create the HTML entity
        let o = $.parseHTML(r);
        // hide .add-data-div
        $(o).find('.add-data-div').hide();
        // add the widgets to the parent
        $(parent_buttons).append(o);
        // add the buttons
        $.each(h['buttons'], function(i, v) {
            datasJs.add_button(parent_buttons, v);
        });

        // draw the items component
        table = document.createElement('table');
        table.setAttribute('data-id-lead', h.id);
        table.setAttribute('class', 'datasjs-items')
        table.setAttribute('style', 'table-layout: fixed; width: 100%;');
        // add items component to the parent
        $(parent_items).append(table);
        // iterate the array of items
        $.each(h['items'], function(i, v) {
            datasJs.add_item(parent_items, v, h.buttons, trash_enabled, copy_enabled, strikethrough_enabled);
        });

        // events
        // store function to trigger when the user adds a value
        if (h['on_check_item'] != null) {
            datasJs.events[parent.id+".on_check_item"] = h['on_check_item'];
        }

        // select all text of .add-data-value when focus on .add-data-value
        $(parent_buttons).find('.add-data-value').focus(function() {
            this.select();
        });

        // show .add-data-div when click on .add-data button
        $(parent_buttons).find('.add-data').click(function() {
            let id_lead = $(this).attr('data-id-lead');
            let type = $(this).attr('data-type');
            let form = $(parent_buttons).find('.add-data-div');
            $(form).find('.add-data-type').val(type);
            $(form).show();
            setTimeout(function() {
                $(form).find('.add-data-value').focus();
            }, 200);
        });
    }
};